# This is a sample Stage/Prod Pipeline that is invoked by CircleCI TAG build
# There is currently a bug within the CircleCI workflow which causes the TAG
# key to be unset, so we use the revision key in 'github.event.deployment.payload.pipeline.vcs.revision'
# to determine the tag version and use that value in subsequent build steps.
# In order to use this workflow, you will need to:
# 1. Configure a webhook a CircleCI webhook based on https://mana.mozilla.org/wiki/display/SRE/Bootstrapping+a+project#Bootstrappingaproject-Addingawebhook
# 2. Add a router sample configuration in your deploy-app repo that accepts the events
# 3. Environments build, stage and prod configuration in Github repo settings
#

name: Deploy Stage/Prod
on:
  deployment: {}
  workflow_dispatch:
    inputs:
      git_tag:
        type: string
        required: true

env:
  GAR_LOCATION: us
  APP: whattrainisitnow
  GAR_REPOSITORY: whattrainisitnow-prod
  GCP_PROJECT_ID: moz-fx-whattrainisitnow-prod
  APPLICATION_REPOSITORY: mozilla/releases_insights
  IMAGE: whattrainisitnow
  RUN_ID: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  REVISION : ${{ github.event.deployment.payload.pipeline.vcs.revision }}
  SLACK_CHANNEL_ID: C046P9LKTRU # #sre-deploy slack channel

jobs:
  tag:
    name: Determine Tag
    runs-on: ubuntu-latest
    environment: build
    permissions:
      contents: read
      id-token: write
    outputs:
      tag: ${{ steps.git-tag.outputs.tag }}
    if: ${{ github.event.deployment.payload.pipeline.vcs.branch == '' && github.event.deployment.environment == 'stage' }}

    steps:
    - id: checkout-application-repo-tag
      uses: actions/checkout@v3
      with:
        path: tmp
        repository: ${{ env.APPLICATION_REPOSITORY }}
        fetch-depth: 0

    - id: determine-git-tag
      shell: bash
      working-directory: tmp
      run: |
        if [[ "${{ env.REVISION }}" != "" ]]; then
        echo "TAG=$(git tag --points-at ${{ env.REVISION }} --sort version:refname | tail -n1)" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.git_tag }}" != "" ]]; then
        echo "TAG=${{ github.event.inputs.git_tag }}" >> $GITHUB_ENV
        else
        echo "Cannot determine TAG"
        exit 1
        fi

    - id: git-tag
      shell: bash
      run: |
        echo "tag=${{ env.TAG }}" >> $GITHUB_OUTPUT

  build:
    name: Build Image - ${{ needs.tag.outputs.tag }}
    runs-on: ubuntu-latest
    environment: build
    env:
      TAG: ${{ needs.tag.outputs.tag }}
    needs: tag
    permissions:
      contents: read
      id-token: write
    outputs:
      tag: ${{ steps.git-tag.outputs.tag }}
    if: ${{ github.event.deployment.payload.pipeline.vcs.branch == '' }}

    steps:
      - id: slack_start
        name: notify slack
        uses: mozilla-it/deploy-actions/slack@v3
        with:
          app_name: ${{ env.APP }}
          env_name: 'stage'
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          type: 'custom'
          message: 'Building Image ${{ env.TAG }}'
          slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN_BUGID_1796141_20221019 }}
        if: always()

      - id: checkout-application-repo
        uses: actions/checkout@v3
        with:
          path: src
          repository: ${{ env.APPLICATION_REPOSITORY }}
          ref: ${{ env.TAG }}

      - uses: docker/setup-buildx-action@v2

      - id: gcp-auth
        uses: google-github-actions/auth@v0
        with:
          token_format: 'access_token'
          service_account: artifact-writer@${{ env.GCP_PROJECT_ID}}.iam.gserviceaccount.com
          workload_identity_provider: projects/324168772199/locations/global/workloadIdentityPools/github-actions/providers/github-actions

      - uses: docker/login-action@v2
        name: Docker login
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcp-auth.outputs.access_token }}

      - id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: src/
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY}}/${{ env.IMAGE}}:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - id: slack_end
        name: notify slack
        uses: mozilla-it/deploy-actions/slack@v3
        with:
          app_name: ${{ env.APP }}
          env_name: 'stage'
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          type: 'custom'
          message: 'Building Image Completed ${{ env.TAG }}'
          slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN_BUGID_1796141_20221019 }}
        if: always()

  deploy_stage:
    name: Deploy Stage - ${{ needs.tag.outputs.tag }}
    environment: stage
    concurrency: stage
    needs: [tag, build]
    runs-on: [self-hosted, nonprod, us-west1]
    env:
      TAG: ${{ needs.tag.outputs.tag}}
    permissions:
      contents: read
      id-token: write
    steps:
      - id: deploy
        uses: mozilla-it/deploy-actions/deploy@v3
        with:
          infra_repo: mozilla-it/webservices-infra
          infra_repo_ref: main
          infra_repo_ssh_key: ${{ secrets.SRE_INFRA_DEPLOY_KEY_WEBSERVICES_1788529_20220901 }}
          app_name: ${{ env.APP }}
          env_name: stage
          realm_name: nonprod
          workload_identity_pool_project_number: '324168772199'
          k8s_cluster_name: webservices-low-nonprod
          k8s_cluster_location: us-west1
          k8s_cluster_project: moz-fx-webservices-low-nonprod
          helm_chart_path: ${{ env.APP }}/k8s/${{ env.APP }}/
          image_tag: ${{ env.TAG }}
          helm_values: "--set ghaRunId=${{ env.RUN_ID }}"

      - id: slack
        name: notify slack
        uses: mozilla-it/deploy-actions/slack@v3
        with:
          app_name: ${{ env.APP }}
          env_name: 'stage'
          ref: ${{ env.TAG }}
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          type: 'end'
          slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN_BUGID_1796141_20221019 }}
        if: always()

  deploy_prod:
    name: Deploy Prod - ${{ needs.tag.outputs.tag }}
    environment: prod
    concurrency: prod
    needs: [tag, build, deploy_stage]
    runs-on: [self-hosted, prod, us-west1]
    env:
      TAG: ${{ needs.tag.outputs.tag }}
    permissions:
      contents: read
      id-token: write
    steps:
      - id: deploy
        uses: mozilla-it/deploy-actions/deploy@v3
        with:
          infra_repo: mozilla-it/webservices-infra
          infra_repo_ref: main
          infra_repo_ssh_key: ${{ secrets.SRE_INFRA_DEPLOY_KEY_WEBSERVICES_1788529_20220901 }}
          app_name: ${{ env.APP }}
          env_name: prod
          realm_name: prod
          workload_identity_pool_project_number: '324168772199'
          k8s_cluster_name: webservices-low-prod
          k8s_cluster_location: us-west1
          k8s_cluster_project: moz-fx-webservices-low-prod
          helm_chart_path: ${{ env.APP }}/k8s/${{ env.APP }}/
          image_tag: ${{ env.TAG }}
          helm_values: "--set ghaRunId=${{ env.RUN_ID }}"

      - id: slack
        name: notify slack
        uses: mozilla-it/deploy-actions/slack@v3
        with:
          app_name: ${{ env.APP }}
          env_name: 'prod'
          ref: ${{ env.TAG }}
          channel_id: ${{ env.SLACK_CHANNEL_ID }}
          type: 'end'
          slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN_BUGID_1796141_20221019 }}
        if: always()
